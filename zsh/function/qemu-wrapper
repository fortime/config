#!/usr/bin/env bash

# NOTES
# 1. start an linux in current stdio: --no-gui --console, then add console=ttyS0 to kernel
#
# 2. use the vm as a backend of podman.
#   > 1. `echo qemu > /etc/containers/podman-machine`
#   > 2. `echo -e '[containers]\nnetns="bridge"' > $HOME/.config/containers/containers.conf`
#   > 3. setup gvproxy, before starting the vm. put these codes in .env of the vm
#   >    ```
#   >    _setup_gvproxy() {
#   >        # used to exposing port in host
#   >        local gvproxy_cmd network_sock_path qemu_sock_path
#   >        gvproxy_cmd=/opt/homebrew/Cellar/podman/$(podman --version|cut -d' ' -f3)/libexec/podman/gvproxy
#   >        network_sock_path=$(pwd)/gvproxy-network.sock
#   >        qemu_sock_path=$(pwd)/gvproxy-qemu.sock
#   >        log_path=$(pwd)/gvproxy.log
#   >        if [ ! -f "$qemu_sock_path" ]
#   >        then
#   >            "$gvproxy_cmd" -listen "unix://${network_sock_path}" -listen-qemu "unix://${qemu_sock_path}" >>"$log_path" 2>&1 &
#   >        fi
#   >        additional_params=("--" "-netdev" "stream,id=vlan,addr.type=unix,addr.path=${qemu_sock_path}" "-device" "virtio-net-pci,netdev=vlan,mac=52:54:01:12:33:56")
#   >    }
#   >
#   >    _setup_gvproxy
#   >
#   >    set -- "$@" "$additional_params[@]"
#   >    ```

check_vm_name() {
    local vm_name
    vm_name=$1
    if [ -z "$vm_name" ]
    then
        echo "please run this script as: qemu-wrapper COMMAND VM_NAME [OPTIONS]" >&2
        exit 1
    fi

    trimmed_vm_name=$(echo -n "$vm_name" | sed 's/[^0-9a-zA-Z_-]//g' | head -1)
    if [ "$vm_name" != "$trimmed_vm_name" ]
    then
        echo "VM_NAME[${vm_name}] invalid characters, allowd: 0-9a-zA-Z_-" >&2
        exit 1
    fi
}

has_option() {
    local target_option
    target_option=$1
    shift
    for option in "$@"
    do
        if [ "$option" = "--" ]
        then
            break
        fi
        if [ "$option" = "$target_option" ]
        then
            return 0
        fi
    done
    return 1
}

create() {
    local size
    size=$1

    if [ -z "$size" ]
    then
        size=20G
    fi

    # create a hard disk
    qemu-img create -f qcow2 disk.qcow2 "$size"

    # create an empty file for persisting UEFI variables
    dd if=/dev/zero conv=sync bs=1M count=4 of=ovmf_vars.fd
}

create_bridge() {
    local name res gateway
    name="$1"
    res=$(ip link show $name >/dev/null 2>&1 || echo no)
    if [ "$res" = "no" ]
    then
        sudo ip link add name $name type bridge
    fi
    sudo ip link set dev $name up

    gateway=10.101.0.1/32
    subnet=10.101.0.0/24
    res=$(ip address show dev $name | grep "$gateway " || echo no)
    if [ "$res" = "no" ]
    then
        sudo ip address add $gateway dev $name
    fi
    res=$(ip route list | grep "$subnet " || echo no)
    if [ "$res" = "no" ]
    then
        sudo ip route add $subnet via ${gateway/\/*/} dev $name
    fi
}

execute() {
    if [ "$dry_run" != "true" ]
    then
        # NOTE. There should be no empty parameter in params, otherwise, it will exit with error "$qemu_system_cmd: : drive with bus=0, unit=0 (index=0) exists"
        $sudo_cmd $qemu_system_cmd "${params[@]}"
    else
        echo $sudo_cmd $qemu_system_cmd "${params[@]}"
    fi

    if [ -n "$post_cmd" ]
    then
        $post_cmd
    fi
}

start() {
    local daemon_mode text_mode serial_port hostfwds volume_idx virtfs_params volumes volume found no_gui additional_params memory_param net_param bridge_net_param need_sudo cdrom_params param sudo_cmd arch kernel qemu_system_cmd smp_param no_net disk_param post_cmd dry_run secure_boot ovmf_file ovmf_vars_file

    arch=$(uname -m)
    case "$arch" in
        "arm64")
            qemu_system_cmd=qemu-system-aarch64
            ;;
        "x86_64")
            qemu_system_cmd=qemu-system-x86_64
            ;;
        *)
            echo "unsupported arch: $arch">&2
            ;;
    esac
    kernel=$(uname -s)

    # allow .env use dry_run
    has_option "--dry-run" "$@" && dry_run=true

    if [ -f ".env" ]
    then
        source .env
    fi

    # don't let .env change dry_run
    has_option "--dry-run" "$@" && dry_run=true

    if [ -n "$hostfwds" ]
    then
        hostfwds=",$hostfwds"
    fi

    volume_idx=0
    virtfs_params=()
    for volume in "${volumes[@]}"
    do
        if [ -n "$volume" ]
        then
            virtfs_params=("${virtfs_params[@]}" -virtfs local,path="$volume",mount_tag="vol${volume_idx}",security_model=none)
        fi
        let volume_idx=$volume_idx+1
    done

    found=false
    no_gui=false
    no_net="${no_net:-false}"
    daemon_mode="${daemon_mode:-false}"
    if [ -z "$additional_params" ]
    then
        additional_params=()
    fi
    memory_param="${mem:-1024M}"
    net_param="-device virtio-net-pci,netdev=net0 -netdev user,id=net0,net=${subnet:-192.168.112.0/24},dhcpstart=${ip:-192.168.112.6}${hostfwds}"
    bridge_net_param=""
    need_sudo=${need_sudo:-false}
    cdrom_params=()
    if [ -z "$disk_param" ]
    then
        disk_param=(-drive file="$(pwd)/disk.qcow2",format=qcow2)
    fi
    while [ -n "$1" ]
    do
        param="$1"
        if [ "$param" = "--" ]
        then
            found="true"
        elif [ "$found" = "true" ]
        then
            if [ "$param" = "-smp" ]
            then
                smp_param=""
            fi
            additional_params=("${additional_params[@]}" "$param")
        else
            case "$param" in
                "--hostfwd")
                    shift
                    if [ -n "$net_param" -a "$no_net" != "true" ]
                    then
                        net_param="$net_param,hostfwd=$1"
                    fi
                    ;;
                "--mem")
                    shift
                    memory_param="$1"
                    ;;
                "--text-mode")
                    text_mode=true
                    ;;
                "--no-gui")
                    no_gui=true
                    ;;
                "--iso")
                    shift
                    cdrom_params=(-drive "file=${1},if=none,media=cdrom,id=cd" -device virtio-scsi-pci -device scsi-cd,drive=cd)
                    ;;
                "--net-shared")
                    if [ "$no_net" != "true" -a "$kernel" = "Darwin" ]
                    then
                        bridge_net_param="-nic vmnet-shared,mac=$shared_mac"
                        need_sudo=true
                    elif [ "$no_net" != "true" ]
                    then
                        if [ "$dry_run" != "true" ]
                        then
                            create_bridge virbr0
                        fi
                        bridge_net_param="-nic bridge,br=virbr0,model=virtio-net-pci,mac=$shared_mac"
                    fi
                    ;;
                "--net-bridged")
                    shift
                    if [ "$no_net" != "true" -a "$kernel" = "Darwin" ]
                    then
                        bridge_net_param="-nic vmnet-bridged,mac=$bridged_mac,ifname=$1"
                        need_sudo=true
                    elif [ "$no_net" != "true" ]
                    then
                        if [ "$dry_run" != "true" ]
                        then
                            create_bridge virbr0
                            sudo ip link set $1 master virbr0
                        fi
                        bridge_net_param="-nic bridge,br=virbr0,model=virtio-net-pci,mac=$bridged_mac"
                    fi
                    # when --net-bridged is used, the vm can connect to the Internet, there is no need to use net_param.
                    net_param=""
                    ;;
                "--legacy-qemu")
                    legacy_qemu=true
                    ;;
                "--need-sudo")
                    need_sudo=true
                    ;;
                "--no-net")
                    no_net=true
                    ;;
                "-d")
                    daemon_mode=true
                    ;;
                "--secure-boot")
                    secure_boot=true
                    ;;
                *)
                    ;;
            esac
        fi
        shift
    done
    if [ "$no_net" = "true" ]
    then
        net_param="-net none"
        bridge_net_param=""
    fi
    params=(-m $memory_param)
    if [ -n "$smp_param" ]
    then
        params=("${params[@]}" -smp "$smp_param")
    fi
    ovmf_vars_file="$(pwd)/ovmf_vars.fd"
    if [ "$arch" = "arm64" -a "$kernel" = "Darwin" ]
    then
        if [ "$secure_boot" = "true" ]
        then
            echo "Secure boot is not supported yet" >&2
            exit 1
        else
            params=("${params[@]}" -accel hvf -cpu host -M virt)
            ovmf_file=${QEMU_WRAPPER_OVMF_FILE:-/opt/homebrew/share/qemu/edk2-aarch64-code.fd}
        fi
    fi
    if [ "$arch" = "x86_64" -a "$kernel" = "Linux" ]
    then
        if [ "$secure_boot" = "true" ]
        then
            params=("${params[@]}" -M q35 -accel kvm -cpu host)
            ovmf_file=${QEMU_WRAPPER_OVMF_SECBOOT_FILE:-/usr/share/edk2/x64/OVMF_CODE.secboot.4m.fd}
            # secure boot variables is needed, otherwise, qemu will exit with error "KVM internal error. Suberror: 1"
            ovmf_vars_file="$(pwd)/ovmf_vars.secboot.fd"
            if [ ! -f "$ovmf_vars_file" ]
            then
                cp ${QEMU_WRAPPER_OVMF_SECBOOT_VARS_FILE:-/usr/share/edk2/x64/OVMF_VARS.4m.fd} "$ovmf_vars_file"
            fi
            [ -d tpm ] || mkdir tpm
            swtpm socket --tpm2 --tpmstate dir="$(pwd)/tpm" --ctrl type=unixio,path="$(pwd)/tpm/tpm.sock" &
            params=("${params[@]}" -chardev socket,id=chrtpm,path="$(pwd)/tpm/tpm.sock" -tpmdev emulator,id=tpm0,chardev=chrtpm -device tpm-tis,tpmdev=tpm0)
        else
            params=("${params[@]}" -accel kvm -cpu host)
            ovmf_file=${QEMU_WRAPPER_OVMF_FILE:-/usr/share/edk2/x64/OVMF_CODE.4m.fd}
        fi
    fi
    params=("${params[@]}" -drive file="$ovmf_file",if=pflash,format=raw,readonly=on)
    params=("${params[@]}" -drive file="$ovmf_vars_file",if=pflash,format=raw)
    params=("${params[@]}" "${cdrom_params[@]}")
    params=("${params[@]}" "${disk_param[@]}")
    params=("${params[@]}" -device usb-ehci -device usb-kbd -device usb-mouse -device usb-tablet -usb)
    params=("${params[@]}" $(echo $net_param))
    params=("${params[@]}" $(echo $bridge_net_param))
    params=("${params[@]}" "${virtfs_params[@]}")

    sudo_cmd=""
    if [ "$need_sudo" = "true" ]
    then
        sudo_cmd=sudo
    fi

    if [ "$daemon_mode" = "true" ]
    then
        params=("${params[@]}" -qmp unix:/$(pwd)/sys.sock,server=on,wait=off)
    else
        if [ "$text_mode" = "true" ]
        then
            serial_port=""
            no_gui=true
        else
            params=("${params[@]}" -monitor stdio)
            if [ -z "$serial_port" ]
            then
                # if there is no gui and serial port for display, qemu will use stdio for display,
                # but stdio is used for monitor. So we force qemu to use gui.
                no_gui=false
            fi
        fi
    fi
    if [ -n "$serial_port" ]
    then
        params=("${params[@]}" -serial telnet::$serial_port,server,nowait)
    fi
    if [ "$no_gui" = "true" ]
    then
        params=("${params[@]}" -nographic -vga none)
        if [ "$legacy_qemu" != "true" ]
        then
            params=("${params[@]}" -device ramfb)
        fi
    else
        if [ -n "$gui_device" ]
        then
            params=("${param[@]}" -device "$gui_device" -display default,show-cursor=on)
        fi
    fi
    if [ -n "$additional_params" ]
    then
        params=("${params[@]}" "${additional_params[@]}")
    fi

    if [ "$daemon_mode" != "true" ]
    then
        execute
    else
        execute 2>&1 >/dev/null &
        disown
    fi
}

set -e

workspace=${QEMU_WRAPPER_WORKSPACE:-"${HOME}/.local/share/qemu-wrapper"}

command=$1
vm_name=$2
case "$command" in
    "list")
        ls -1 ${workspace}
        ;;
    "pwd")
        echo ${workspace}
        ;;
    "create")
        check_vm_name "${vm_name}"
        shift 2
        if [ -d "${workspace}/${vm_name}" ]
        then
            echo "vm exists: ${workspace}/${vm_name}" >&2
            exit 3
        fi

        mkdir -p "${workspace}/${vm_name}"

        cd "${workspace}/${vm_name}"

        create "$@"
        echo "$vm_name created!"
        ;;
    "start")
        check_vm_name "${vm_name}"
        shift 2
        if [ ! -d "${workspace}/${vm_name}" ]
        then
            echo "vm not exists: ${vm_name}" >&2
            exit 2
        fi

        cd "${workspace}/${vm_name}"

        start "$@"
        ;;
    "cd")
        cd "${workspace}"
        $SHELL
        ;;
    *)
        echo "unsupported command: $command" >&2
        exit 1
        ;;
esac
