call plug#begin()

" Bundle
" For smart completion
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --java-completer --js-completer --clang-completer --system-libclang' }
"" Languages
" For Rust
Plug 'rust-lang/rust.vim'
" For css syntax bugs fix
Plug 'hail2u/vim-css-syntax'
" For css3 syntax
Plug 'hail2u/vim-css3-syntax'
" JavaScript
"Plug 'pangloss/vim-javascript'
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim'
" For cpp enhanced syntax highlight
Plug 'octol/vim-cpp-enhanced-highlight'
" For ycm listing diagnostic message
Plug 'Valloric/ListToggle'
" For syntax diagnosting
"Plug 'scrooloose/syntastic'
" For async syntax diagnosting
Plug 'w0rp/ale'
" For auto completion for quotes, parens, brackets
Plug 'Raimondi/delimitMate'
" For git integration
Plug 'tpope/vim-fugitive'
" For exploring filesystem
Plug 'scrooloose/nerdtree'
" For tag navigation
Plug 'majutsushi/tagbar'
" For toggling nerdtree and tagbar
Plug 'fortime/ntatb'
" For systemd syntax
Plug 'Matt-Stevens/vim-systemd-syntax'
" For colorscheme
Plug 'gmoe/vim-espresso'
Plug 'NLKNguyen/papercolor-theme'
" For cpp enhanced syntax highlight using libclang
"Plug 'bbchung/clighter'
" Snip
Plug 'SirVer/ultisnips'
" Snippets
Plug 'honza/vim-snippets'
" Ansible yaml syntax
"Plug 'chase/vim-ansible-yaml'
" Pretty status line
Plug 'bling/vim-airline'
" vim-airline-themes
Plug 'vim-airline/vim-airline-themes'
" highlight trailing whitespaces
Plug 'ntpeters/vim-better-whitespace'
" Git
"Plug 'airblade/vim-gitgutter'
" AsyncRun
Plug 'skywind3000/asyncrun.vim'
" Visual Increment
Plug 'triglav/vim-visual-increment'
" Autoformat
Plug 'Chiel92/vim-autoformat'
" EasyMotion
Plug 'easymotion/vim-easymotion'
" vim-latex
"Plug 'vim-latex/vim-latex'
" Enhanced multi-file search
Plug 'wincent/ferret'
" Basic fzf
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" Enhanced fzf
Plug 'junegunn/fzf.vim'
" complementary pairs of mappings
Plug 'tpope/vim-unimpaired'
" debugger plugin
Plug 'puremourning/vimspector'
" Aligning Text
Plug 'godlygeek/tabular'

function! Cond(cond, ...)
    let opts = get(a:000, 0, {})
    return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

function! FcitxRemoteWontPanic()
    " fcitx5-remote will panic when it can't chat to dbus
    if !executable('fcitx5-remote')
        return 1
    endif
    if !empty($DBUS_SESSION_BUS_ADDRESS)
        let l:bus_path = substitute($DBUS_SESSION_BUS_ADDRESS, "unix:path=", "", "")
        return !empty(glob(l:bus_path))
    endif
    if !empty($XDG_RUNTIME_DIR)
        return !empty(glob($XDG_RUNTIME_DIR + "/bus"))
    endif
    return 0
endfunction

" switch to the default im when leaving buffer
Plug 'rlue/vim-barbaric', Cond(FcitxRemoteWontPanic())

call plug#end()

syntax on
filetype on
filetype plugin on
filetype indent on

set t_Co=256
set background=dark

" paper-color-scheme {{{
if !has('gui_running')
    let g:PaperColor_Theme_Options = {
    \        'theme': {
    \            'default': {
    \                'transparent_background': 1
    \            }
    \        }
    \    }
endif
" }}}
colorscheme PaperColor
hi Function guifg=#6c99bb ctermfg=67
hi LineNr guifg=#050505 ctermfg=grey
"highlight Normal ctermbg=NONE
"highlight Folded ctermbg=black term=standout cterm=bold ctermfg=6 guifg=#40f0f0 guibg=#006090
"highlight FoldColumn ctermbg=black term=standout cterm=bold ctermfg=6 guifg=#40c0ff guibg=#404040
"highlight SignColumn ctermbg=yellow term=standout cterm=bold ctermfg=6 guifg=Cyan guibg=Grey
"highlight Conceal ctermbg=4 ctermfg=7 guifg=LightGrey guibg=DarkGrey
"highlight PmenuSel ctermbg=red ctermfg=0 guibg=DarkGrey
"highlight PmenuSbar ctermbg=5 guibg=Grey
"highlight PmenuThumb ctermbg=4 guibg=DarkGrey
"highlight TabLine ctermbg=3 term=underline cterm=bold,underline ctermfg=7 gui=underline guibg=DarkGrey
"highlight CursorColumn ctermbg=4 ctermfg=5 term=reverse guibg=Grey40

set guifont=WenQuanYi\ Micro\ Hei\ Mono\ 14

set nocompatible
set noeb
set confirm

set autoindent
set cindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

set number
set relativenumber

set history=1000
set nobackup
set noswapfile

set enc=utf-8
set fencs=utf-8,gb18030,gbk,gb2312,cp936,ucs-bom,shift-jis

set gdefault

set hlsearch
set incsearch

"set statusline=%{strftime(\"%d/%m/%y\ -\ %H:%M\")}\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ %F%m%r%h%w\ [POS=%l,%v][%p%%]
set laststatus=2
set ruler
set cmdheight=2

set linespace=0
set wildmenu
set backspace=2

set foldenable
set foldmethod=indent
set completeopt+=popup
" SQLComplete use C-c to triger complete which is confliced with my mapping
let g:omni_sql_no_default_maps = 1

" no resizing for all windows after a ycm buffer view close
set noequalalways

" disable reindent while typing ':'
set indentkeys-=<:>

"nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" Map Ctrl-c to Esc
" {{{
ino <C-C> <Esc>
" }}}

" KeyMap {{{
nnoremap <F2> :set number! relativenumber!<CR>
nnoremap <F6> :echo expand('%')<CR>
" }}}

" JumpToTheLineLastOpen {{{
autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
" }}}

" YouCompleteMe {{{
let g:ycm_confirm_extra_conf = 0
let g:ycm_min_num_identifier_candidate_chars = 5
let g:ycm_error_symbol = 'E'
let g:ycm_warning_symbol = 'W'
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_max_diagnostics_to_display = 30
let g:ycm_key_invoke_completion = '<C-S-Space>'
let g:ycm_key_detailed_diagnostics = 'gdd'
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
" conflicted with ScrollPopup keymapping
let g:ycm_key_list_stop_completion = []
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_goto_buffer_command = 'split-or-existing-window'
" reuse workspace
let g:ycm_java_jdtls_use_clean_workspace = 0
" unlimited candidate
let g:ycm_max_num_candidates = 0
let g:ycm_max_num_candidates_to_detail = 10
" show completion in comment
let g:ycm_complete_in_comments = 1

nnoremap gdf :YcmCompleter GoToDefinition<CR>
nnoremap gdc :YcmCompleter GoToDeclaration<CR>
nnoremap gdi :YcmCompleter GoToImplementation<CR>
nnoremap gdr :YcmCompleter GoToReferences<CR>
nnoremap gsc :YcmCompleter GoTo<CR>
nnoremap gfi :YcmCompleter FixIt<CR>
nnoremap gdt :YcmCompleter GoToSymbol<Space>
nnoremap grf :YcmCompleter OpenProject .
nnoremap gll :YcmToggleLogs<CR>

function! ToggleYcm()
    if g:ycm_auto_trigger == 0
        let g:ycm_auto_trigger = 1
    else
        let g:ycm_auto_trigger = 0
    endif
endfunction
map <silent> <F7> :call ToggleYcm()<CR>
" }}}

" NERDTree {{{
let g:NERDTreeWinSize = 20
let NERDTreeWinPos=1
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" }}}

" Tagbar {{{
let g:tagbar_width = 20
let g:tagbar_left = 1

map <silent> <F8> :NtatbToggleAll<CR>
map <silent> <F9> :NtatbToggleTagbar<CR>
map <silent> <F10> :NtatbToggleNERDTree<CR>
" }}}

" Ultisnip {{{
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
" }}}

" {{{
let g:airline_theme = "badwolf"
let g:airline#extensions#tabline#enabled = 1
" }}}

" OpenCOrCppFileForCurrentHeader {{{
autocmd BufEnter *.h,*.hpp nnoremap gcc :call OpenCOrCppFileForCurrentHeader()<CR>
function! OpenCOrCppFileForCurrentHeader()
    let extension = expand("%:e")
    if extension == "h"
        let target = expand("%<:p").".c"
        echo target
        if (filereadable(target))
            exec ":sp ". target
            return
        endif
    endif
    if extension == "hpp" || extension == "h"
        let target = expand("%<:p").".cpp"
        echo target
        if (filereadable(target))
            exec ":sp ". target
            return
        endif
        let target = expand("%<:p").".cc"
        echo target
        if (filereadable(target))
            exec ":sp ". target
            return
        endif
    endif
endfunction
" }}}
" OpenHeaderFileForCurrentSource {{{
autocmd BufEnter *.cc,*.cpp,*.c nnoremap gch :call OpenHeaderFileForCurrentSource()<CR>
function! OpenHeaderFileForCurrentSource()
    let extension = expand("%:e")
    if extension != "cc" && extension != "cpp" && extension != "c"
        return
    endif
    let target = expand("%<:p").".h"
    echo target
    if (filereadable(target))
        exec ":sp ". target
        return
    endif
    if extension != "cc" && extension != "cpp"
        return
    endif
    let target = expand("%<:p").".hpp"
    echo target
    if (filereadable(target))
        exec ":sp ". target
        return
    endif
endfunction
" }}}

" OpenHtmlFileForCurrentJsFile {{{
autocmd BufEnter *.js nnoremap ght :call OpenHtmlFileForCurrentJsFile()<CR>
function! OpenHtmlFileForCurrentJsFile()
    let extension = expand("%:e")
    if extension == "js"
        let target = expand("%<:p").".html"
        echo target
        if (filereadable(target))
            exec ":sp ". target
            return
        endif
    endif
endfunction
" }}}
" OpenJsFileForCurrentHtmlFile {{{
autocmd BufEnter *.html nnoremap gjs :call OpenJsFileForCurrentHtmlFile()<CR>
function! OpenJsFileForCurrentHtmlFile()
    let extension = expand("%:e")
    if extension == "html"
        let target = expand("%<:p").".js"
        echo target
        if (filereadable(target))
            exec ":sp ". target
            return
        endif
    endif
endfunction
" }}}

" Reset tab stop {{{
autocmd FileType javascript,javascriptreact,css,json,yaml setlocal sw=2 ts=2 sts=2 expandtab
" }}}

" Edit indentkeys {{{
autocmd FileType yaml setlocal indentkeys-=0# indentkeys-=<:>
" }}}

" JAVA specified seting {{{
" autocmd BufEnter *.java setlocal expandtab!
let g:java_highlight_functions=1
let g:java_highlight_java_lang_ids=1
"}}}

" folding by indent for tex {{{
autocmd FileType tex setlocal foldmethod=indent
let g:tex_flavor='latex'
"}}}

" Quick open/close quickfix window {{{
nnoremap <F3> :copen 10<CR>
nnoremap <F4> :ccl<CR>
" }}}
"

" Autoformat {{{
function! CustomizedAutoformat()
    if &filetype == "java"
        YcmCompleter Format
    else
        Autoformat
    endif
endfunction
noremap <F5> :call CustomizedAutoformat()<CR>
let g:formatdef_prettier = '"prettier --stdin-filepath ".expand("%:p").(&textwidth ? " --print-width ".&textwidth : "")." --tab-width=".shiftwidth()'
let g:formatdef_scalafmt = "'scalafmt --stdin'"
let g:formatters_scala = ['scalafmt']
let g:formatdef_rustfmt = "'rustfmt --edition 2021'"
let g:formatters_rust = ['rustfmt']
let g:formatters_javascript = ['prettier']
let g:formatdef_cssfmt = "'prettier --parser css --tab-width 2 --stdin'"
let g:formatters_css = ['cssfmt']
let g:formatdef_htmlfmt = "'prettier --parser html --tab-width 2 --stdin'"
let g:formatters_html = ['htmlfmt']
let g:formatdef_xmlfmt = "'tidy -q -raw -xml --indent-spaces 4 --indent yes --indent-attributes yes --vertical-space yes --output-xml yes --wrap 0'"
let g:formatters_xml = ['xmlfmt']
let g:formatdef_jsonfmt = "'jq'"
let g:formatters_json = ['jsonfmt']
let g:formatters_python = ['black']
let g:formatdef_markdownfmt = "'prettier --parser markdown --stdin'"
let g:formatters_markdown = ['markdownfmt']
" To disable the fallback to vim's indent file, retabbing and removing trailing whitespace
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
" }}}

" ALE {{{
" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1
" Pylint for python 3 by default
let g:ale_python_pylint_executable = 'python3'
"let g:ale_linters = {'python': ['flake8', 'pylint']}
let g:ale_linters = {'python': ['flake8']}
let g:ale_python_flake8_options = '--max-line-length 88'
" }}}

" vim-visual-increment {{{
set nrformats=alpha,octal,hex
" }}}

" ferret {{{
nmap gsw <Plug>(FerretAckWord)
nmap gso <Plug>(FerretAck)
" }}}

" fzf {{{
nmap <silent> gsg :GFiles --recurse-submodules<CR>
nmap <silent> gsh :GFiles -moc --directory<CR>
nmap <silent> gsr :Files<CR>

function! FerretBufferLineHandler(lines)
    if len(a:lines) < 2
        return
    endif

    execute split(a:lines[1], '\t')[0]
    normal! ^zvzz
    exec "normal \<Enter>"
endfunction

command! -bang -nargs=* FerretBLines call fzf#vim#buffer_lines('', {'sink*': function('FerretBufferLineHandler')}, <bang>0)
nmap ,s :copen \| FerretBLines<CR>
nmap ,f :BLines<CR>
" }}}

" No line number {{{
autocmd VimEnter * if (&filetype == '') | setlocal nonumber norelativenumber | else | setlocal number relativenumber | endif
autocmd BufReadPost * if (&filetype == '') | setlocal nonumber norelativenumber | else | setlocal number relativenumber | endif
autocmd TerminalWinOpen * setlocal nonumber norelativenumber
" }}}

" Scroll popup {{{
function! ScrollPopup(down)
    let winid = popup_findinfo()
    if winid == 0
        return 0
    endif

    let pp = popup_getpos(winid)
    if pp.visible != 1
        return 0
    endif

    let firstline = pp.firstline + a:down
	let buf_lastline = str2nr(trim(win_execute(winid, "echo line('$')")))
    if firstline < 1
        let firstline = 1
    elseif pp.lastline + a:down > buf_lastline
        let firstline = firstline - a:down + buf_lastline - pp.lastline
    endif

    " The appear of scrollbar will change the layout of the content which will cause inconsistent height.
    call popup_setoptions( winid,
                \ {'scrollbar': 0, 'firstline' : firstline } )

    return 1
endfunction

inoremap <expr> <C-e> ScrollPopup(3) ? '' : '<C-e>'
inoremap <expr> <C-y> ScrollPopup(-3) ? '' : '<C-y>'
" }}}

" Load host specific variables {{{
let $CUSTOM_VARIABLE_VIMRC = $HOME . "/.vim/custom_variable_vimrc"
if filereadable($CUSTOM_VARIABLE_VIMRC)
    source $CUSTOM_VARIABLE_VIMRC
endif
" }}}

" init vimspector {{{
"let g:vimspector_enable_mappings = 'HUMAN'
let s:jdt_ls_debugger_port = 0
function! s:StartDebugging()
    if s:jdt_ls_debugger_port <= 0
        " Get the DAP port
        let s:jdt_ls_debugger_port = youcompleteme#GetCommandResponse(
            \ 'ExecuteCommand',
            \ 'vscode.java.startDebugSession' )

        if s:jdt_ls_debugger_port == ''
             echom "Unable to get DAP port - is JDT.LS initialized?"
             let s:jdt_ls_debugger_port = 0
             return
         endif
    endif

    " Start debugging with the DAP port
    call vimspector#LaunchWithSettings( { 'DAPPort': s:jdt_ls_debugger_port } )
endfunction

nnoremap <silent> <buffer> <Leader><F5> :call <SID>StartDebugging()<CR>
" }}}
